
# README для проекта TOF-MEASURE на ESP32

## Описание проекта

Проект TOF-MEASURE представляет собой веб-приложение, работающее на микроконтроллере ESP32, которое позволяет измерять расстояние с использованием I2C-датчика TF Luna. 
Данные о расстоянии отображаются на веб-странице, которая обновляется каждые 3 секунды.

## Схема подключения

[ESP32]
   | 
   +--> [TF Luna (I2C)]
   |         |
   |         +--> SDA (GPIO 21)
   |         +--> SCL (GPIO 22)

### Подключение:

1. **SDA**: Подключите вывод SDA датчика TF Luna к GPIO 21 ESP32.
2. **SCL**: Подключите вывод SCL датчика TF Luna к GPIO 22 ESP32.
3. **Питание**: Подключите питание (VCC) и землю (GND) датчика TF Luna к соответствующим выводам ESP32.

## Необходимые компоненты

- ESP32
- Датчик TF Luna (I2C)
- Соединительные провода
- Компьютер с установленной Arduino IDE

## Установка библиотек

Перед использованием проекта убедитесь, что у вас установлены следующие библиотеки:

- **Wire**: Библиотека для работы с I2C.
- **WiFi**: Библиотека для подключения к Wi-Fi.
- **WebServer**: Библиотека для создания веб-сервера.

## Настройки Wi-Fi

В коде замените следующие строки на ваше имя Wi-Fi и пароль:

const char* ssid = "Ваше_имя_Wi-Fi";        
const char* password = "Ваш_пароль_Wi-Fi"; 

## Компиляция и загрузка

1. Откройте Arduino IDE.
2. Скопируйте и вставьте код в новый скетч.
3. Подключите ESP32 к компьютеру.
4. Выберите соответствующий порт и модель ESP32 в меню инструментов.
5. Нажмите кнопку "Загрузить" для компиляции и загрузки скетча.

## Использование

1. После загрузки скетча откройте Serial Monitor (9600 бод) в Arduino IDE для проверки состояния подключения к Wi-Fi.
2. Найдите IP-адрес вашего ESP32, который будет выведен в Serial Monitor.
3. Откройте веб-браузер и введите IP-адрес в адресной строке.
4. Вы увидите страницу с заголовком "TOF-MEASURE" и отображаемым расстоянием, которое будет обновляться каждые 3 секунды.

## Структура кода

1. **Инициализация**
   - Подключение к I2C и Wi-Fi.
   - Запуск веб-сервера.
   
2. **Основной цикл (loop)**
   - Обновление расстояния каждые 2 секунды.
   - Обработка клиентских запросов.

3. **Обработчики запросов**
   - `handleRoot()`: Отправляет HTML-страницу с текущим расстоянием.
   - `handleUpdate()`: Обновляет данные о расстоянии и отправляет их клиенту.

4. **Чтение данных**
   - `readDistance()`: Читает данные от датчика TF Luna через I2C и возвращает расстояние в сантиметрах.

## Примечания

- Убедитесь, что датчик подключен и работает корректно, чтобы избежать ошибок при считывании данных.
- В случае возникновения проблем с подключением к Wi-Fi проверьте правильность введенных SSID и пароля.

Схема программы:

[Инициализация]
     |
     v
[Основной цикл (loop)]
     |
     +--> [Инициализация]
     |         |
     |         +--> Инициализация последовательного порта
     |         +--> Инициализация I2C
     |         +--> Подключение к Wi-Fi
     |         +--> Настройка веб-сервера
     |         +--> Вывод IP-адреса в Serial Monitor
     |
     +--> [Обработка запросов от клиентов]
     |         |
     |         +--> [Проверка состояния клиента]
     |                  |
     |                  +--> Если запрос на главную страницу:
     |                  |         +--> Вызов handleRoot
     |                  |
     |                  +--> Если запрос на обновление данных:
     |                            +--> Вызов handleUpdate
     |
     +--> [Обновление данных о расстоянии]
     |         |
     |         +--> [Проверка времени обновления]
     |                  |
     |                  +--> Если прошло 2 секунды:
     |                            +--> Вызов updateDistance
     |
     +--> [Обработка данных о расстоянии]
               |
               +--> [Чтение расстояния из датчика]
               |         |
               |         +--> Вызов readDistance
               |                  |
               |                  +--> Если данные получены:
               |                  |         +--> Преобразование в метры
               |                  |         +--> Обновление lastResponse
               |                  |
               |                  +--> Если ошибка:
               |                            +--> Обновление lastResponse с ошибкой
               |
               +--> [Отправка данных на клиент]
                         |
                         +--> Если запрос на обновление:
                                   +--> Ответ клиенту с текущим расстоянием
                         |
                         +--> Если запрос на главную страницу:
                                   +--> Ответ клиенту с HTML-страницей
     |
     +--> [Команды препроцессора]
               |
               +--> #include <Wire.h>
               +--> #include <WiFi.h>
               +--> #include <WebServer.h>
     |
     +--> [Прототипы функций]
               |
               +--> void setup();
               +--> void loop();
               +--> void handleRoot();
               +--> void handleUpdate();
               +--> void updateDistance();
               +--> int readDistance();

Программист-разработчик Меркулов Е. В. SYN-SOFT. LTD
