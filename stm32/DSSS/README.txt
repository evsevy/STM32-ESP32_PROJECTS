# README для программы передатчика и приемника сигналов

## Описание

Данная программа реализует систему передачи и приема сигналов с использованием технологии, основанной на псевдослучайных последовательностях (PN-секвенции) и модуляции. 
Программа разбита на два основных модуля: передатчик и приемник. Каждый модуль реализован в виде отдельного файла с заголовками и исходными кодами.

### Основные функции

1. **Передатчик**:
   - Инициализация UART для передачи данных.
   - Генерация и модуляция сигнала на основе входного массива.
   - Отправка сигнала с подтверждением о получении.

2. **Приемник**:
   - Инициализация UART для приема данных.
   - Выборка синхронного байта для начала передачи сигнала.
   - Демодуляция и фильтрация принятого сигнала.
   - Логирование максимального значения сигнала.

## Структура проекта

------------------------------------------------------------------
/project
│
├── transmitter.h      // Заголовочный файл для передатчика
├── transmitter.c      // Исходный файл для передатчика
├── receiver.h         // Заголовочный файл для приемника
└── receiver.c         // Исходный файл для приемника
------------------------------------------------------------------
## Установка и сборка

### Требования

- Среда разработки для STM32 (например, STM32CubeIDE)
- Библиотека HAL для STM32

### Процесс сборки

1. Скачайте или склонируйте репозиторий с проектом.
2. Откройте проект в STM32CubeIDE.
3. Убедитесь, что в проекте подключены необходимые библиотеки и настроены параметры платы.
4. Соберите проект, используя встроенные инструменты IDE.
5. Загрузите прошивку на ваше устройство STM32.

## Использование

### Передатчик

1. Инициализируйте UART, вызвав функцию `init_uart()`.
2. Создайте массив с входным сигналом, например, используя синусоиду.
3. Вызовите функцию `transmit_signal()` с указателем на массив сигнала для его передачи.

### Приемник

1. Инициализируйте UART, вызвав функцию `init_uart()`.
2. Запустите основной цикл, который будет постоянно вызывать функцию `receive_signal()`, ожидая приема данных.

## Настройки

В заголовочных файлах можно настроить следующие параметры:

- `PN_SEQUENCE_LENGTH`: Длина последовательности псевдослучайных чисел.
- `SAMPLE_RATE`: Частота выборки (в Гц).
- `SIGNAL_LENGTH`: Длина сигнала.
- `UART_BUFFER_SIZE`: Размер буфера для UART.
- `SYNC_BYTE`: Сигнал синхронизации.
- `ACK_BYTE`: Сигнал подтверждения.

## Логирование

Логирование сообщений осуществляется через UART. Для этого используется функция `log_message()`, которая отправляет текстовые сообщения на UART для мониторинга работы системы.

---------------------------------------------------------------------------------

+----------------+         +----------------+
| Передатчик     |         | Приемник       |
| STM32          |         | STM32          |
|                |         |                |
| +------------+ |         | +------------+ |
| | UART       | |         | | UART       | |
| +------------+ |         | +------------+ |
|                |         |                |
| +------------+ |         | +------------+ |
| | DSP        | |         | | DSP        | |
| +------------+ |         | +------------+ |
|                |         |                |
| +------------+ |         | +------------+ |
| | Signal     | |         | | Signal     | |
| +------------+ |         | +------------+ |
+----------------+         +----------------+
        |                           |
        | UART                      | UART
        |                           |
        +---------------------------+


Эта реализация позволяет надежно передавать данные на основе метода DSSS, обеспечивая синхронизацию между передатчиком и приемником. 
Передатчик повторно отправляет сигнал, если не получает подтверждение от приемника, что улучшает надежность системы. 
Вы можете дополнительно расширить функциональность системы, добавив более сложные алгоритмы обработки сигналов и механизмы проверки ошибок.

Copyright (c) 2025 Syn_Soft, Программист-разработчик Меркулов Е. В. 
